version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks
    parameters:
      when_to_run:
          type: string
          default: "on_fail"  
    steps:
      - run:
          name: Destroy environments
          when: << parameters.when_to_run >>
          command: |
            aws delete-stack --stack-name udapeople-frontend
            aws delete-stack --stack-name udapeople-backend

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when_to_run:
          type: string
          default: "on_fail"     
    steps:
      - run:
          name: Revert migrations
          when: << parameters.when_to_run >>
          command: |
            SUCCESS = $(curl https://kvdb.io/5hLmPDbqt5FqFEguCc3iJZ/migration_${CIRCLE_WORKFLOW_ID:0:7}) 
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install 
            npm run build 
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install 
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test Frontend
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test Backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analysis frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Analysis backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend" \
            --parameter-overrides ID="udapeople-backend"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend" \
            --parameter-overrides ID="udapeople-frontend" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cat .circleci/ansible/inventory.txt
            echo "[web]" > .circleci/ansible/inventory.txt
            aws ec2 describe-instances        \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters 'Name=tag:Name,Values=backend-*' 'Name=instance-state-name,Values=running'  \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: yum install -y tar gzip
      - add_ssh_keys:
          fingerprints:
            - "b1:f1:3c:67:c3:c8:00:d7:be:0d:e0:b5:cf:02:65:dc"
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Install dependencies
          command: |
            amazon-linux-extras install -y ansible2
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout 
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep "successfully." > ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/5hLmPDbqt5FqFEguCc3iJZ/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
  #    # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # install ansible
            amazon-linux-extras install -y ansible2
            # install python
            yum -y install openssl-devel bzip2-devel libffi-devel
            yum -y install gcc-c++ make
            yum -y install wget
            wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz 
            tar xvf Python-3.9.10.tgz
            cd Python-*/
            ./configure --enable-optimizations
            make altinstall
            yum -y groupinstall "Development Tools"
            # install nodejs
            yum -y install curl
      - run:  curl -sL https://rpm.nodesource.com/setup_13.x | bash -
      - run: 
          name: "Install nodejs"
          command:  |
            yum install -y nodejs
            npm install -g webpack webpack-cli
            npm link webpack
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances        \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text \
            --filters 'Name=tag:Name,Values=backend-*' 'Name=instance-state-name,Values=running')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" > frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-frontend.tar.gz dist
            aws s3 cp dist s3://udapeople-udapeople-frontend --recursive 
  #     Here's where you will add some code to rollback on failure    
      - persist_to_workspace:
          root: ~/
          paths: ~/
      - destroy-environment:
          when_to_run: on_fail
      - revert-migrations:
          when_to_run: on_fail


                    
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout 
      - run: yum install -y tar gzip
      - add_ssh_keys:
          fingerprints:
            - "17:f5:6e:f2:3d:b0:b2:ca:0b:a2:ed:aa:31:e9:30:a2"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            #  install ansible
            amazon-linux-extras install -y ansible2
            # install python
            yum -y install openssl-devel bzip2-devel libffi-devel
            yum -y install gcc-c++ make
            yum -y install wget
            wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz 
            tar xvf Python-3.9.10.tgz
            cd Python-*/
            ./configure --enable-optimizations
            make altinstall
            yum -y groupinstall "Development Tools"
            # install nodejs
            yum -y install curl
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations, deploy-frontend]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]